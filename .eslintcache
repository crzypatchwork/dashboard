[{"/home/crzy/Desktop/pibic/dashboard/src/index.js":"1","/home/crzy/Desktop/pibic/dashboard/src/App.js":"2","/home/crzy/Desktop/pibic/dashboard/src/reportWebVitals.js":"3","/home/crzy/Desktop/pibic/dashboard/src/components/Map.js":"4"},{"size":500,"mtime":1611623716447,"results":"5","hashOfConfig":"6"},{"size":145,"mtime":1611624616575,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611623716447,"results":"8","hashOfConfig":"6"},{"size":3356,"mtime":1611675868446,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1q6onds",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/crzy/Desktop/pibic/dashboard/src/index.js",[],["20","21"],"/home/crzy/Desktop/pibic/dashboard/src/App.js",[],"/home/crzy/Desktop/pibic/dashboard/src/reportWebVitals.js",[],"/home/crzy/Desktop/pibic/dashboard/src/components/Map.js",["22","23","24","25","26"],"import { svg } from 'd3'\nimport React, { Component } from 'react'\n\nconst d3 = require('d3')\nconst axios = require('axios')\nconst d3geo = require('d3-geo')\nconst d3scale = require('d3-scale')\n\nexport default class Map extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    componentDidMount = async () => {\n        this.drawBarChart(await axios.get('http://3.15.164.185:5000/industries_count').then(res => res.data))\n    }\n\n    componentWillMount = () => {\n\n\n        // The svg\n        var svg = d3.select(this.refs.div)\n\n        // Map and projection\n        /*         var projection = d3.geoMercator()\n                    .center([2, 47])                // GPS of location to zoom on\n                    .scale(980)                       // This is like the zoom\n                    .translate([width / 2, height / 2]) */\n\n        // Load external data and boot\n        var projection = d3.geoMercator()\n            .center([2, 47])                // GPS of location to zoom on\n            .scale(980)                       // This is like the zoom\n            .translate([800 / 2, 800 / 2])\n\n        d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\", function (data) {\n\n            // Filter data\n            data.features = data.features.filter(function (d) { console.log(d.properties.name); return d.properties.name == \"France\" })\n\n            // Draw the map\n            svg.append(\"g\")\n                .selectAll(\"path\")\n                .data(data.features)\n                .enter()\n                .append(\"path\")\n                .attr(\"fill\", \"grey\")\n                .attr(\"d\", d3.geoPath()\n                    .projection(projection)\n                )\n                .style(\"stroke\", \"none\")\n        })\n\n    }\n\n    drawBarChart = async (data) => {\n\n        var arr = data.payload.map(e => e.industry)\n        arr = arr.slice(0, 20)\n        console.log(arr)\n        var svg = d3.select(this.refs.bar)\n            .append('svg')\n            .attr('width', 1000)\n            .attr('height', 1000)\n\n        var x = d3.scalePoint()\n            .domain(arr)\n            .range([100, 800])\n\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,800)\")      // This controls the rotate position of the Axis\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(0,0)rotate(45)\")\n            .style(\"text-anchor\", \"start\")\n            .style(\"font-size\", 20)\n\n        var values = data.payload.map(e => e.count)\n        values = values.slice(0, 20)\n        console.log(values)\n\n        var y = d3.scaleLinear()\n            .domain([0, values[0]])\n            .range([800, 100]);\n\n\n        values.map((e, i) => {\n            svg\n                .append(\"rect\")\n                .attr('x', x(arr[i]))\n                .attr('y', 0)\n                .attr(\"width\", 10)\n                .attr(\"height\", Math.abs(y(0) - y(values[i])))\n                .attr('fill', 'black')\n                .attr('transform', 'translate(0,795)scale(1, -1)')\n        })\n\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(50,0)\")\n            .call(d3.axisLeft(y));\n\n    }\n\n    render() {\n        return (\n            <div ref='bar'>\n            </div>\n        )\n    }\n}\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":13},{"ruleId":"31","severity":1,"message":"35","line":6,"column":7,"nodeType":"33","messageId":"34","endLine":6,"endColumn":12},{"ruleId":"31","severity":1,"message":"36","line":7,"column":7,"nodeType":"33","messageId":"34","endLine":7,"endColumn":14},{"ruleId":"37","severity":1,"message":"38","line":44,"column":122,"nodeType":"39","messageId":"40","endLine":44,"endColumn":124},{"ruleId":"41","severity":1,"message":"42","line":93,"column":27,"nodeType":"43","messageId":"44","endLine":93,"endColumn":29},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'svg' is defined but never used.","Identifier","unusedVar","'d3geo' is assigned a value but never used.","'d3scale' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]