{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["d3","require","axios","Map","props","componentDidMount","a","get","then","res","data","drawBarChart","componentWillMount","svg","select","refs","div","projection","geoMercator","center","scale","translate","json","features","filter","d","console","log","properties","name","append","selectAll","enter","attr","geoPath","style","arr","payload","map","e","industry","slice","bar","x","scalePoint","domain","range","call","axisBottom","values","count","y","scaleLinear","i","Math","abs","axisLeft","state","ref","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAGMA,G,MAAKC,EAAQ,KACbC,EAAQD,EAAQ,KAIDE,GAHPF,EAAQ,IACNA,EAAQ,I,kDAIpB,WAAYG,GAAQ,IAAD,8BACf,cAAMA,IAOVC,kBARmB,sBAQC,sBAAAC,EAAA,6EACQJ,EAAMK,IAAI,6CAA6CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAD/E,wBACXC,aADW,2DARD,EAYnBC,mBAAqB,WAIjB,IAAIC,EAAMb,EAAGc,OAAO,EAAKC,KAAKC,KAS1BC,EAAajB,EAAGkB,cACfC,OAAO,CAAC,EAAG,KACXC,MAAM,KACNC,UAAU,CAAC,IAAS,MAEzBrB,EAAGsB,KAAK,uFAAuF,SAAUZ,GAGrGA,EAAKa,SAAWb,EAAKa,SAASC,QAAO,SAAUC,GAAqC,OAAhCC,QAAQC,IAAIF,EAAEG,WAAWC,MAAmC,UAArBJ,EAAEG,WAAWC,QAGxGhB,EAAIiB,OAAO,KACNC,UAAU,QACVrB,KAAKA,EAAKa,UACVS,QACAF,OAAO,QACPG,KAAK,OAAQ,QACbA,KAAK,IAAKjC,EAAGkC,UACTjB,WAAWA,IAEfkB,MAAM,SAAU,YA7CV,EAkDnBxB,aAlDmB,uCAkDJ,WAAOD,GAAP,uBAAAJ,EAAA,sDAGX8B,GADIA,EAAM1B,EAAK2B,QAAQC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,aACxBC,MAAM,EAAG,IACnBf,QAAQC,IAAIS,GACRvB,EAAMb,EAAGc,OAAO,EAAKC,KAAK2B,KACzBZ,OAAO,OACPG,KAAK,QAAS,KACdA,KAAK,SAAU,KAEhBU,EAAI3C,EAAG4C,aACNC,OAAOT,GACPU,MAAM,CAAC,IAAK,MAEjBjC,EACKiB,OAAO,KACPG,KAAK,YAAa,oBAClBc,KAAK/C,EAAGgD,WAAWL,IACnBZ,UAAU,QACVE,KAAK,YAAa,4BAClBE,MAAM,cAAe,SACrBA,MAAM,YAAa,IAGxBc,GADIA,EAASvC,EAAK2B,QAAQC,KAAI,SAAAC,GAAC,OAAIA,EAAEW,UACrBT,MAAM,EAAG,IACzBf,QAAQC,IAAIsB,GAERE,EAAInD,EAAGoD,cACNP,OAAO,CAAC,EAAGI,EAAO,KAClBH,MAAM,CAAC,IAAK,MAGjBG,EAAOX,KAAI,SAACC,EAAGc,GACXxC,EACKiB,OAAO,QACPG,KAAK,IAAKU,EAAEP,EAAIiB,KAChBpB,KAAK,IAAK,GACVA,KAAK,QAAS,IACdA,KAAK,SAAUqB,KAAKC,IAAIJ,EAAE,GAAKA,EAAEF,EAAOI,MACxCpB,KAAK,OAAQ,SACbA,KAAK,YAAa,mCAG3BpB,EACKiB,OAAO,KACPG,KAAK,YAAa,mBAClBc,KAAK/C,EAAGwD,SAASL,IA9CX,4CAlDI,sDAGf,EAAKM,MAAQ,GAHE,E,qDAqGf,OACI,qBAAKC,IAAI,Y,GAxGYC,cCGlBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.81a78212.chunk.js","sourcesContent":["import { svg } from 'd3'\nimport React, { Component } from 'react'\n\nconst d3 = require('d3')\nconst axios = require('axios')\nconst d3geo = require('d3-geo')\nconst d3scale = require('d3-scale')\n\nexport default class Map extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n    }\n\n    componentDidMount = async () => {\n        this.drawBarChart(await axios.get('http://3.15.164.185:5000/industries_count').then(res => res.data))\n    }\n\n    componentWillMount = () => {\n\n\n        // The svg\n        var svg = d3.select(this.refs.div)\n\n        // Map and projection\n        /*         var projection = d3.geoMercator()\n                    .center([2, 47])                // GPS of location to zoom on\n                    .scale(980)                       // This is like the zoom\n                    .translate([width / 2, height / 2]) */\n\n        // Load external data and boot\n        var projection = d3.geoMercator()\n            .center([2, 47])                // GPS of location to zoom on\n            .scale(980)                       // This is like the zoom\n            .translate([800 / 2, 800 / 2])\n\n        d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\", function (data) {\n\n            // Filter data\n            data.features = data.features.filter(function (d) { console.log(d.properties.name); return d.properties.name == \"France\" })\n\n            // Draw the map\n            svg.append(\"g\")\n                .selectAll(\"path\")\n                .data(data.features)\n                .enter()\n                .append(\"path\")\n                .attr(\"fill\", \"grey\")\n                .attr(\"d\", d3.geoPath()\n                    .projection(projection)\n                )\n                .style(\"stroke\", \"none\")\n        })\n\n    }\n\n    drawBarChart = async (data) => {\n\n        var arr = data.payload.map(e => e.industry)\n        arr = arr.slice(0, 20)\n        console.log(arr)\n        var svg = d3.select(this.refs.bar)\n            .append('svg')\n            .attr('width', 1000)\n            .attr('height', 1000)\n\n        var x = d3.scalePoint()\n            .domain(arr)\n            .range([100, 800])\n\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,800)\")      // This controls the rotate position of the Axis\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(0,0)rotate(45)\")\n            .style(\"text-anchor\", \"start\")\n            .style(\"font-size\", 20)\n\n        var values = data.payload.map(e => e.count)\n        values = values.slice(0, 20)\n        console.log(values)\n\n        var y = d3.scaleLinear()\n            .domain([0, values[0]])\n            .range([800, 100]);\n\n\n        values.map((e, i) => {\n            svg\n                .append(\"rect\")\n                .attr('x', x(arr[i]))\n                .attr('y', 0)\n                .attr(\"width\", 10)\n                .attr(\"height\", Math.abs(y(0) - y(values[i])))\n                .attr('fill', 'black')\n                .attr('transform', 'translate(0,795)scale(1, -1)')\n        })\n\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(50,0)\")\n            .call(d3.axisLeft(y));\n\n    }\n\n    render() {\n        return (\n            <div ref='bar'>\n            </div>\n        )\n    }\n}\n","import './App.css'\nimport Map from './components/Map'\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}